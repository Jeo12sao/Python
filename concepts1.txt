1.  How do you move back and forth between directories?
    cd First/Directory/ or cd .. or cd pathname .
2.  How do you create and delete files?
In Python you use hello_world.py, or whatever file name that you want to use,and then hit save.
You can also use touch and .txt behind the file
3.  How do you create and delete directories?
You would use mkdir and the name of the directory you are creating. 
rmdir removes directories
4.  How can I see exactly where I am within the file system?
list/ls
5.  How can I see the files and directories within the current directory that I am in?
pwd- print working directory

Git
1.  How do you let git know you want to track changes made in a directory?
    Create a repository/git init
2.  How do you tell git that you like the work you’ve done and want it to be a part of a chunk of work to be saved?
    git add and git commit -m " comment "
3.  How do you tell git you want to save a chunk of work?
    git add and git commit -m " comments
4.  How do you tell git where to push your local changes up to a online repository?
    git push
5.  How can you safely work on a different version of your current project?
    git branch
6.  How can you make that different version become a part of your main version
    git main adds the different version to your main branch.
7.  How do I move between versions of my project?
    git branch
8.  How can I go back to previous chunks of work that I’ve created and work from that point in time?
    git branch ,git diff
9.  Let’s say I wrote a bad message for a commit. How could I change it? (edited) 
:white_check_mark: 
git revert or git reset. 
revert - add a new commit that change your files back to a previous state
reset - remove commits and erase the changes that they made


Python
1.  How do I run my code from the terminal?
  print () runs your code ex. print("Hello World")
2.  What can I use to reference a value later in my code?
   reference number

3.  How can I make my program display text or some value in my terminal?
   print("Hello, World!")print()
4.  How can I make my code make decisions on which code to execute?
    The elif,if, else keyword is pythons way of saying "if the previous conditions
     were not true, then try this condition". def can also make decisions.
   
5.  How can I repeat blocks of code based on conditions?
    The elif,if, else keyword is pythons way of saying "if the previous conditions
     were not true, then try this condition". def can also make decisions.
    
6.  Why is it critical to ensure that our conditions eventually become false when repeating blocks of code?
    An infinite loop will result and crash your customer's machine. 

7.  What are sequences and what are the differences between them?
     A sequence is a data type that can store multiple, individual values.
     Lists are mutable (modifiable) sequences - versatile, general-purpose collection
     Tuples are immutable sequences - best for representing a something with a fixed size (e.g., GPS coordinates)
     ranges are lists of numeric values

8.  How do I access a value within the various types of sequences?
You use the index to refer to a specific item in the List.
ex. 0 cat/1 rat/2 bat first_item = cat[0] 

9.  What is an index when talking about sequences?
   Index is like a seat #, except the first number is always 0.

10. What is the index of the first value within a sequence?
    The first number is always 0.

11. How can I add or remove a value from a sequence?
   The word del and the index number 0, will remove pet the cat.
   todos = ["pet the cat", "go to work", "shop for groceries", "go home", "feed the cat"]
   del todos[0] # Remove the first one
   

12. What is the index of the last value within a sequence?
   len -1
13. How can I get the length of a sequence?
   len(list1)-1

14. What can I use to reference and use a block of code later in my code?
   you can use a function. ex function() {
                              alert("hello");
   }
15. What is DRY?
 don"t repeat yourself

16. What is Scope? Provide an example.
The scope defines the accessibility of the python
 object. To access the particular variable in the code, the scope must be defined as it 
 t be accessed from anywhere in the program. The particular coding region where variables are visible is known as scope. Variables are not visible to the entire code; their visibility can be restricted.
 Scope verifies which variable can be ‘Seen’. The scope defines the set of rules which
  tell us how and where a variable can be searched. The variable is searched either to 
  retrieve a value or for assigning value. The namespace is the unique 
  identification of the variable or the method. Namespace tells the python 
  interpreter about the name of the object and the location from where 
  it is trying to access it

 global Scope
  def demo():
print(Str)
# Global
Str = "You are clever"
demo()
   

17. What is the difference between parameters and arguments?
    A parameter is a variable in a method definition or function definition. 
    They are also called formal parameters. When we call a method, 
    arguments are the real data that we pass into the parameters of the method. 
    They are also known as actual parameters. 

    def addNumbers(para1, para2):
    sum = para1 + para2
    print("The sum is " ,sum)

addNumbers(2,5)

18. What is recursion?
     Python also accepts function recursion, which means a defined function can call 
     itself.
     Recursion is a common mathematical and programming concept. It means that a function
      calls itself. 
    This has the benefit of meaning that you can loop through data to reach a result.
    def tri_recursion(k):
  if(k>0):
    result = k+tri_recursion(k-1)
    print(result)
  else:
    result = 0


19. How can you return a value from a function?
   The pop() method removes the item with the specified key name:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)

20. Describe a dictionary. How and why would it be useful?
Dictionaries are used to store data values in key:value pairs.
Dictionaries are written with curly brackets, and have keys and values:
thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)

21. How can you remove a value from a dictionary?
    The pop() method removes the item with the specified key name:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict.pop("model")
print(thisdict)

22. How can you access and change values within a dictionary?
   You can change the value of a specific item by referring to its key name:
   Change the "year" to 2018:

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
thisdict["year"] = 2018

23. What data types can a sequence hold?
    Strings, lists, and tuples are all sequence types, 
    so called because they behave l
    ike a sequence - an ordered collection of objects.

24. What data types can a dictionary hold?
Dictionary in Python is an unordered collection of data values, 
used to store data values like a map, which, unlike other Data 
Types that hold only a single value as an element, Dictionary holds key:value pair. Key-value is provided in the dictionary to make it more optimized. 
 

25. How can you iterate through a dictionary?
   Unlike sequences, which are iterables that support element access 
   using integer indices, dictionaries are indexed by keys.

The keys in a dictionary are much like a set, which is a collection of hashable and unique objects. Because the objects need to be hashable,
 mutable objects can’t be used as dictionary keys.
26. What is object oriented programming?
   One of the popular approaches to solve a programming problem 
   is by creating objects. This is known as Object-Oriented Programming (OOP).
An object has two characteristics
attributes
behavior

27. Describe a class? Why are they useful?
    A class is a representation or a blueprint. The are useful because they 
    provide individuality.
28. What are class properties? How would I give a class an initial set of properties?
29. What are class methods?
30. What is inheritence?
   In computer programming, Inheritance is an eminent concept in Object Orient Programming (OOPS) Paradigm. 
   It provides a mechanism for establishing relationships and building hierarchies of class in object composition. Inheritance means the use of code that is pre-written or created previously. And one thing to keep in mind is that we are just using the code and not updating or changing it. The functions and methods defined in one class may be used in manipulating other data members of the class

31.  What are the various data types? (edited) 











